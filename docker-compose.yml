version: '3.8'

services:
  app:
    build: .
    container_name: django_app
    # Переменные окружения можно загрузить из файла .env
    env_file:
      - .env
    volumes:
      # Монтируем медиа-файлы, чтобы они были доступны nginx и сохранялись
      - ./media:/app/media
      # Монтируем файл базы данных SQLite, чтобы он сохранялся
      # ВАЖНО: Убедись, что путь к базе данных в settings.py соответствует /app/db.sqlite3
      - ./db.sqlite3:/app/db.sqlite3
      # Монтируем директорию со статикой (хотя она собирается в образ,
      # nginx может ее прочитать напрямую из этого volume)
      - static_volume:/app/static_root
    # Мы не публикуем порт 8000 наружу, т.к. доступ будет через nginx
    # expose:
    #   - 8000
    command: >
      sh -c "python manage.py migrate &&
             gunicorn --bind 0.0.0.0:8000 --workers 3 core.wsgi:application"
    # depends_on:
      # Можно добавить зависимости, например, базу данных PostgreSQL, если используешь
      # - db # Пример, если бы была отдельная БД

  nginx:
    image: nginx:latest
    container_name: nginx_proxy
    ports:
      # Пробрасываем порт 80 хоста на порт 80 контейнера nginx
      - "80:80"
      # Если нужен HTTPS, добавь порт 443
      # - "443:443"
    volumes:
      # Монтируем нашу конфигурацию nginx
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      # Монтируем статику из volume, который создает app
      - static_volume:/app/static_root:ro # :ro - read-only, nginx только читает статику
      # Монтируем медиа из volume, который создает app
      - ./media:/app/media:ro # :ro - read-only
      # Если используешь HTTPS, нужно будет смонтировать сертификаты
      # - ./certs:/etc/nginx/certs
    depends_on:
      - app # Запускаем nginx после запуска app

volumes:
  static_volume: # Docker сам управляет этим volume